class Window {
    constructor(program) {
        this.program = program;
        this.isMinimized = false;
        this.isMaximized = false;
        this.element = this.createWindowElement();
        this.taskbarItem = this.createTaskbarItem();
        this.position = { x: 0, y: 0 };
        this.centerWindow();
        this.mapInstance = null;
        this.panorama = null;
        if (this.program === 'maps') {
            this.initMap();
        } else if (this.program === 'internet-explorer') {
            this.initInternetExplorer();
        }else if (this.program === 'emoji-keyboard') {
            this.initEmojiKeyboard();
        }
    }

    createWindowElement() {
        const window = document.createElement('div');
        window.className = 'window';
        window.innerHTML = `
            <div class="window-header">
                <span>${this.program}</span>
                <div class="window-controls">
                    <button class="minimize">_</button>
                    <button class="maximize">‚ñ°</button>
                    <button class="close">X</button>
                </div>
            </div>
            <div class="window-content">
                ${this.getContentForProgram()}
            </div>
        `;

        this.addWindowEventListeners(window);
        return window;
    }

    getContentForProgram() {
        switch (this.program) {
            case 'maps':
                return `
                    <div id="map-container" style="width: 100%; height: 100%;">
                        <div id="map" style="width: 100%; height: 100%;"></div>
                        <button class="toggle-street-view">Toggle Street View</button>
                    </div>
                `;
            case 'emoji-keyboard':
                return `
                    <div class="emoji-keyboard">
                        <div class="emoji-categories"></div>
                        <div class="emoji-grid"></div>
                        <div class="emoji-pagination">
                            <button class="prev-page">Anterior</button>
                            <span class="page-info"></span>
                            <button class="next-page">Siguiente</button>
                        </div>
                    </div>
                `;
            case 'internet-explorer':
                return `
                    <div class="browser-container" style="width: 100%; height: 100%;">
                        <div class="browser-controls">
                            <button id="browser-back">‚Üê</button>
                            <button id="browser-forward">‚Üí</button>
                            <button id="browser-reload">‚Üª</button>
                            <input type="text" id="browser-url" placeholder="Ingrese una URL">
                            <button id="browser-go">Ir</button>
                        </div>
                        <iframe id="browser-frame" src="https://es.wikipedia.org/wiki/Wikipedia:Portada" width="100%" height="100%" style="border: none;"></iframe>
                    </div>
                `;
            case 'notepad':
                return `<textarea class="notepad-content" style="width: 100%; height: 100%; resize: none;"></textarea>`;
            case 'my-computer':
                return `
                    <div class="file-explorer">
                        <div class="file-item">
                            <img src="images/icons/folder.png" alt="Folder">
                            <span>Documentos</span>
                        </div>
                        <div class="file-item">
                            <img src="images/icons/folder.png" alt="Folder">
                            <span>Im√°genes</span>
                        </div>
                        <div class="file-item">
                            <img src="images/icons/folder.png" alt="Folder">
                            <span>M√∫sica</span>
                        </div>
                    </div>
                `;
            case 'recycle-bin':
                return `    
                    <div class="recycle-bin">
                        <p>La papelera est√° vac√≠a</p>
                        <button class="empty-bin">Vaciar papelera</button>
                    </div>
                `;
            case 'minesweeper':
                return `<div id="minesweeper-game"></div>`;
            case 'solitaire':
                return `
                    <div class="solitaire-container" style="width: 100%; height: 100%;">
                        <iframe src="https://frvr.com/play/solitaire/" width="100%" height="100%" style="border: none;"></iframe>
                    </div>
                `;
            default:
                return `<p>Contenido de ${this.program}</p>`;
        }
    }

    initEmojiKeyboard() {
        this.emojiCategories = {
            'Cara y expresiones': ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è', 'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üò∂‚Äçüå´Ô∏è', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'üòÆ‚Äçüí®', 'ü§•', 'üòå', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'üòµ‚Äçüí´', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏', 'üòé', 'ü§ì', 'üßê', 'üòï', 'üòü', 'üôÅ', '‚òπÔ∏è', 'üòÆ', 'üòØ', 'üò≤', 'üò≥', 'ü•∫', 'üò¶', 'üòß', 'üò®', 'üò∞', 'üò•', 'üò¢', 'üò≠', 'üò±', 'üòñ', 'üò£', 'üòû', 'üòì', 'üò©', 'üò´', 'ü•±', 'üò§', 'üò°', 'üò†', 'ü§¨', 'üòà', 'üëø', 'üíÄ', '‚ò†Ô∏è', 'üí©', 'ü§°', 'üëπ', 'üë∫', 'üëª', 'üëΩ', 'üëæ', 'ü§ñ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä'],
            'Gestos': ['üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏'],
            'Animales y Naturaleza': ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'ü™±', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü™∞', 'ü™≤', 'ü™≥', 'ü¶ü', 'ü¶ó', 'üï∑Ô∏è', 'üï∏Ô∏è', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë', 'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨', 'üê≥', 'üêã', 'ü¶à', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'ü¶£', 'üêò', 'ü¶õ', 'ü¶è', 'üê™', 'üê´', 'ü¶í', 'ü¶ò', 'ü¶¨', 'üêÉ', 'üêÇ', 'üêÑ', 'üêé', 'üêñ', 'üêè', 'üêë', 'ü¶ô', 'üêê', 'ü¶å', 'üêï', 'üê©', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üêà', 'üêà‚Äç‚¨õ', 'ü™∂', 'üêì', 'ü¶É', 'ü¶§', 'ü¶ö', 'ü¶ú', 'ü¶¢', 'ü¶©', 'üïäÔ∏è', 'üêá', 'ü¶ù', 'ü¶®', 'ü¶°', 'ü¶´', 'ü¶¶', 'ü¶•', 'üêÅ', 'üêÄ', 'üêøÔ∏è', 'ü¶î', 'üêæ', 'üêâ', 'üê≤', 'üåµ', 'üéÑ', 'üå≤', 'üå≥', 'üå¥', 'ü™µ', 'üå±', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üéç', 'ü™¥', 'üéã', 'üçÉ', 'üçÇ', 'üçÅ', 'üçÑ', 'üêö', 'ü™®', 'üåæ', 'üíê', 'üå∑', 'üåπ', 'ü•Ä', 'üå∫', 'üå∏', 'üåº', 'üåª', 'üåû', 'üåù', 'üåõ', 'üåú', 'üåö', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåô', 'üåé', 'üåç', 'üåè', 'ü™ê', 'üí´', '‚≠ê', 'üåü', '‚ú®', '‚ö°', '‚òÑÔ∏è', 'üí•', 'üî•', 'üå™Ô∏è', 'üåà', '‚òÄÔ∏è', 'üå§Ô∏è', '‚õÖ', 'üå•Ô∏è', '‚òÅÔ∏è', 'üå¶Ô∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå©Ô∏è', 'üå®Ô∏è', '‚ùÑÔ∏è', '‚òÉÔ∏è', '‚õÑ', 'üå¨Ô∏è', 'üí®', 'üíß', 'üí¶', '‚òî', '‚òÇÔ∏è', 'üåä', 'üå´Ô∏è'],
            // ... Puedes a√±adir m√°s categor√≠as aqu√≠
        };
        this.currentCategory = Object.keys(this.emojiCategories)[0];
        this.currentPage = 1;
        this.emojisPerPage = 48;

        const categoryContainer = this.element.querySelector('.emoji-categories');
        Object.keys(this.emojiCategories).forEach(category => {
            const button = document.createElement('button');
            button.textContent = category;
            button.addEventListener('click', () => this.changeCategory(category));
            categoryContainer.appendChild(button);
        });

        const prevButton = this.element.querySelector('.prev-page');
        const nextButton = this.element.querySelector('.next-page');
        prevButton.addEventListener('click', () => this.changePage(-1));
        nextButton.addEventListener('click', () => this.changePage(1));

        this.updateEmojiGrid();
        // Agregar evento de redimensionamiento
        window.addEventListener('resize', () => {
            this.updateEmojiGrid();
        });
    }

    changeCategory(category) {
        this.currentCategory = category;
        this.currentPage = 1;
        this.updateEmojiGrid();
    }

    changePage(delta) {
        const totalPages = Math.ceil(this.emojiCategories[this.currentCategory].length / this.emojisPerPage);
        this.currentPage = Math.max(1, Math.min(this.currentPage + delta, totalPages));
        this.updateEmojiGrid();
    }

    updateEmojiGrid() {
        const emojiGrid = this.element.querySelector('.emoji-grid');
        emojiGrid.innerHTML = '';
        // Calcular el n√∫mero de emojis que caben en la pantalla
        const gridRect = emojiGrid.getBoundingClientRect();
        const buttonSize = 40; // Tama√±o aproximado de cada bot√≥n de emoji
        const columns = Math.floor(gridRect.width / buttonSize);
        const rows = Math.floor(gridRect.height / buttonSize);
        this.emojisPerPage = columns * rows;

        const startIndex = (this.currentPage - 1) * this.emojisPerPage;
        const endIndex = startIndex + this.emojisPerPage;
        const emojisToShow = this.emojiCategories[this.currentCategory].slice(startIndex, endIndex);

        emojisToShow.forEach(emoji => {
            const button = document.createElement('button');
            button.textContent = emoji;
            button.addEventListener('click', () => this.insertEmoji(emoji));
            emojiGrid.appendChild(button);
        });

        const pageInfo = this.element.querySelector('.page-info');
        const totalPages = Math.ceil(this.emojiCategories[this.currentCategory].length / this.emojisPerPage);
        pageInfo.textContent = `P√°gina ${this.currentPage} de ${totalPages}`;
    }

    insertEmoji(emoji) {
        const notepadWindow = Array.from(document.querySelectorAll('.window'))
            .find(w => w.querySelector('.window-header span').textContent === 'notepad');
        
        if (notepadWindow) {
            const textarea = notepadWindow.querySelector('.notepad-content');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            const before = text.substring(0, start);
            const after = text.substring(end);
            textarea.value = before + emoji + after;
            textarea.selectionStart = textarea.selectionEnd = start + emoji.length;
            textarea.focus();
        } else {
            alert('Por favor, abre el Notepad primero para usar el teclado de emojis.');
        }
    }

    initInternetExplorer() {
        const container = this.element.querySelector('.browser-container');
        const iframe = container.querySelector('#browser-frame');
        const backBtn = container.querySelector('#browser-back');
        const forwardBtn = container.querySelector('#browser-forward');
        const reloadBtn = container.querySelector('#browser-reload');
        const urlInput = container.querySelector('#browser-url');
        const goBtn = container.querySelector('#browser-go');

        backBtn.addEventListener('click', () => iframe.contentWindow.history.back());
        forwardBtn.addEventListener('click', () => iframe.contentWindow.history.forward());
        reloadBtn.addEventListener('click', () => iframe.contentWindow.location.reload());

        goBtn.addEventListener('click', () => {
            let url = urlInput.value.trim();
            if (!url.startsWith('http://') && !url.startsWith('https://')) {
                url = 'https://' + url;
            }
            iframe.src = url;
        });

        urlInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                goBtn.click();
            }
        });

        // Ajustar el estilo para los controles del navegador
        const style = document.createElement('style');
        style.textContent = `
            .browser-controls {
                display: flex;
                padding: 5px;
                background-color: #f0f0f0;
            }
            .browser-controls button {
                margin-right: 5px;
            }
            .browser-controls input {
                flex-grow: 1;
                margin-right: 5px;
            }
        `;
        document.head.appendChild(style);
    }

    /*initMap() {
        // Aseg√∫rate de que el script de la API de Google Maps est√© cargado
        if (typeof google === 'undefined') {
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyAPLgcdubhw7rDS9u-BeHPuoI8mg6ri5S8&callback=initMap`;
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
            
            if (!window.initMap) {
                window.initMap = () => {
                    document.querySelectorAll('.window').forEach(windowElement => {
                        const windowInstance = windowElement.windowInstance;
                        if (windowInstance && windowInstance.program === 'maps' && !windowInstance.mapInstance) {
                            windowInstance.setupMap();
                        }
                    });
                };
            }
        } else {
            this.setupMap();
        }
    }*/
        initMap() {
            if (typeof google === 'undefined' || typeof google.maps === 'undefined') {
                if (!window.mapsCallbacks) {
                    window.mapsCallbacks = [];
                }
    
                window.mapsCallbacks.push(() => this.setupMap());
    
                if (!document.querySelector('script[src*="maps.googleapis.com/maps/api/js"]')) {
                    const script = document.createElement('script');
                    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyAPLgcdubhw7rDS9u-BeHPuoI8mg6ri5S8&callback=initMap`;
                    script.async = true;
                    script.defer = true;
                    document.head.appendChild(script);
    
                    window.initMap = () => this.setupMap();
                }
            } else {
                this.setupMap();
            }
        }

        setupMap() {
            const mapDiv = this.element.querySelector('#map');
            if (!mapDiv) {
                console.error('Map container not found');
                return;
            }
    
            try {
                this.mapInstance = new google.maps.Map(mapDiv, {
                    center: { lat: 37.3943436, lng: -5.9304048 },
                    zoom: 14
                });
    
                google.maps.event.addListenerOnce(this.mapInstance, 'idle', () => {
                    this.panorama = this.mapInstance.getStreetView();
                    const toggleButton = this.element.querySelector('.toggle-street-view');
                    if (toggleButton) {
                        toggleButton.addEventListener('click', () => this.toggleStreetView());
                    }
                });
            } catch (error) {
                console.error('Error setting up map:', error);
            }
        }
    
        toggleStreetView() {
            if (!this.panorama) {
                console.error('Street View not initialized');
                return;
            }
            
            const toggle = this.panorama.getVisible();
            if (toggle == false) {
                this.panorama.setPosition(this.mapInstance.getCenter());
                this.panorama.setPov({
                    heading: 34,
                    pitch: 10
                });
                this.panorama.setVisible(true);
            } else {
                this.panorama.setVisible(false);
            }
        }
    

    createTaskbarItem() {
        const item = document.createElement('div');
        item.className = 'taskbar-item';
        item.textContent = this.program;
        item.addEventListener('click', () => this.toggleMinimize());
        return item;
    }

    addWindowEventListeners(window) {
        const controls = window.querySelector('.window-controls');
        controls.querySelector('.minimize').addEventListener('click', () => this.minimize());
        controls.querySelector('.maximize').addEventListener('click', () => this.toggleMaximize());
        controls.querySelector('.close').addEventListener('click', () => this.close());

        this.makeDraggable(window);

        // Agregar listeners espec√≠ficos para cada programa
        if (this.program === 'recycle-bin') {
            const emptyButton = window.querySelector('.empty-bin');
            emptyButton.addEventListener('click', () => {
                alert('La papelera ha sido vaciada');
            });
        } else if (this.program === 'minesweeper') {
            // Inicializar el juego del buscaminas
            initMinesweeper(window.querySelector('#minesweeper-game'));
        }
    }
    initSolitaire() {
        const container = this.element.querySelector('.solitaire-container');
        const iframe = container.querySelector('iframe');

        // Ajustar el tama√±o del iframe cuando la ventana cambie de tama√±o
        const resizeObserver = new ResizeObserver(() => {
            this.adjustIframeSize(iframe);
        });
        resizeObserver.observe(container);
    }


    centerWindow() {
        const desktop = document.getElementById('desktop');
        const rect = desktop.getBoundingClientRect();
        this.position.x = (rect.width - this.element.offsetWidth) / 2;
        this.position.y = (rect.height - this.element.offsetHeight) / 2;
        this.updatePosition();
    }

    updatePosition() {
        this.element.style.left = `${this.position.x}px`;
        this.element.style.top = `${this.position.y}px`;
    }

    makeDraggable(window) {
        const header = window.querySelector('.window-header');
        header.addEventListener('mousedown', (e) => {
            if (this.isMaximized) return;

            const startX = e.clientX - this.position.x;
            const startY = e.clientY - this.position.y;

            const onMouseMove = (e) => {
                this.position.x = e.clientX - startX;
                this.position.y = e.clientY - startY;
                this.updatePosition();
            };

            const onMouseUp = () => {
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            };

            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        });
    }

    minimize() {
        this.isMinimized = true;
        this.element.style.display = 'none';
        this.taskbarItem.classList.add('minimized');
    }

    toggleMinimize() {
        if (this.isMinimized) {
            this.isMinimized = false;
            this.element.style.display = 'block';
            this.taskbarItem.classList.remove('minimized');
        } else {
            this.minimize();
        }
    }

    toggleMaximize() {
        this.isMaximized = !this.isMaximized;
        this.element.classList.toggle('maximized');
        if (!this.isMaximized) {
            this.updatePosition();
        }
        this.adjustIframeSize();
    }

    adjustIframeSize() {
        const iframe = this.element.querySelector('iframe');
        if (iframe) {
            if (this.isMaximized) {
                const desktopRect = document.getElementById('desktop').getBoundingClientRect();
                iframe.style.width = `${desktopRect.width}px`;
                iframe.style.height = `${desktopRect.height - 30}px`; // 30px for the window header
            } else {
                iframe.style.width = '100%';
                iframe.style.height = '100%';
            }
        }
    }

    close() {
        if (this.mapInstance) {
            // Clean up the map instance
            google.maps.event.clearInstanceListeners(this.mapInstance);
            this.mapInstance = null;
        }
        this.element.remove();
        this.taskbarItem.remove();
    }
}

function openWindow(program) {
    const window = new Window(program);
    const container = document.getElementById('windows-container');
    container.appendChild(window.element);
    window.element.windowInstance = window;  // Store a reference to the Window instance
    document.getElementById('taskbar-programs').appendChild(window.taskbarItem);
}

// Event listener for desktop icons
document.querySelectorAll('.desktop-icon').forEach(icon => {
    icon.addEventListener('click', () => {
        const program = icon.getAttribute('data-program');
        openWindow(program);
    });
});